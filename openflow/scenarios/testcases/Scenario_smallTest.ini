[General]
network = openflow.networks.Scenario_SmallTest

output-vector-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.vec
output-scalar-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.sca

#sim-time-limit = 0.55s
debug-on-errors = false
check-signals = false # to disabel checking signals

#Spanning Tree
**.spanningTree.NodeType = "openflow.openflow.switch.Open_Flow_Switch.ned"
**.spanningTree.startNode = 1
**.highlightActivePorts = true

# udp apps
**.numUdpApps = 1
**.client*.udpApp[0].typename = "UDPBasicApp"

**.client_1.udpApp[0].destAddresses = "server_1"
**.client_2.udpApp[0].destAddresses = "server_2"
**.client_3.udpApp[0].destAddresses = "server_3"
**.client_4.udpApp[0].destAddresses = "server_1"
**.client_5.udpApp[0].destAddresses = "server_2"
**.client_6.udpApp[0].destAddresses = "server_3"
**.client_7.udpApp[0].destAddresses = "server_1"
**.client_8.udpApp[0].destAddresses = "server_2"
**.client_9.udpApp[0].destAddresses = "server_3"

**.client*.udpApp[0].destPort = 1000
**.client*.udpApp[0].startTime = 2s
**.client*.udpApp[0].sendInterval = 0.001s
**.client*.udpApp[0].messageLength = 64B
**.client*.udpApp[*].timeToLive = 10


**.server*.udpApp[0].typename = "UDPEchoApp"
**.server*.udpApp[0].localPort = 1000


#openflow
**.switch_1.OF_Switch.connectAddress = "of_controller_1"
**.switch_1.OF_Switch.connectAt = uniform(0s,1s)
**.switch_1.etherMAC[*].mac.promiscuous = true
**.switch_2.OF_Switch.connectAddress = "of_controller_2"
**.switch_2.OF_Switch.connectAt = uniform(0s,1s)
**.switch_2.etherMAC[*].mac.promiscuous = true
**.switch_3.OF_Switch.connectAddress = "of_controller_1"
**.switch_3.OF_Switch.connectAt = uniform(0s,1s)
**.switch_3.etherMAC[*].mac.promiscuous = true
**.switch_4.OF_Switch.connectAddress = "of_controller_2"
**.switch_4.OF_Switch.connectAt = uniform(0s,1s)
**.switch_4.etherMAC[*].mac.promiscuous = true

#**.of_controller.numControllerApps = 1
#**.of_controller.controllerApps[0].typename = "Hub"
#**.of_controller*.numControllerApps = 2
#**.of_controller*.controllerApps[0].typename = "LLDPForwarding"
#**.of_controller*.controllerApps[0].flowModIdleTimeOut = 5
#**.of_controller*.controllerApps[0].dropIfNoRouteFound = false
#**.of_controller*.controllerApps[1].typename = "LLDPAgent"
#**.of_controller*.controllerApps[1].flowModIdleTimeOut = 140

**.of_controller*.numControllerApps = 3
**.of_controller*.controllerApps[0].typename = "LLDPForwarding"
#refer to beacon leraning switch code
**.of_controller*.controllerApps[0].flowModIdleTimeOut = 5
**.of_controller*.controllerApps[0].ignoreArpRequests = true

**.of_controller*.controllerApps[1].typename = "HF_LLDPAgent"
**.of_controller*.controllerApps[1].flowModIdleTimeOut = 140
**.of_controller*.controllerApps[1].printMibGraph = true

**.of_controller*.controllerApps[2].typename = "HF_ARPResponder"


**.of_controller*.numTcpControllerApps = 1
**.of_controller*.tcpControllerApps[0].typename = "HyperFlowAgent"
**.of_controller*.tcpControllerApps[0].connectAddressHyperFlowSynchronizer = "hf_synchronizer"
**.of_controller*.tcpControllerApps[0].checkSyncEvery=250ms

# 404bytes see imix and buffer size of 1.5mb see hp switch 1500000/404
**.switch*.bufferCapacity = 3712
**.switch*.serviceTime = 0.000035s


#1800 00 requests per second on 8xcores 8xthreads and 32 switches (hotice2012-final)
**.of_controller.serviceTime = 0.000005556s *(${controllerServiceTimeFactor=1} )


# NIC configuration
**.ppp[*].queue.frameCapacity = 10  # in routers
**.switch*.tcp.mss = 800


#linux mint 15 std value
**.arp.cacheTimeout = 60s
 
# configure control and data plane interfaces separately
*.configurator.config = xmldoc("ipv4config.xml")
 